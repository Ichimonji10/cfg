server {
    listen 80;
    server_name transmission.jerebear.name;
    return 301 https://transmission.jerebear.name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name transmission.jerebear.name;
    ssl_certificate ssl/transmission.jerebear.name.chained.crt;
    ssl_certificate_key ssl/transmission.jerebear.name.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  # SSLv3 is insecure

    auth_basic "transmission.jerebear.name";
    auth_basic_user_file /etc/nginx/transmission.jerebear.name.htpasswd;

    location / {
        root /usr/share/nginx/transmission.jerebear.name;
    }

    # Configuration derived from:
    #
    # * https://unix.stackexchange.com/a/225751
    # * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host
    location /transmission/ {
        proxy_pass        http://wireguard:9091;
        proxy_pass_header X-Transmission-Session-Id;
        proxy_set_header  Host             $host;
        proxy_set_header  X-Real-IP        $remote_addr;
        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
    }

    # TODO: Add this to personal notes.
    #
    # root + client request == filesystem target. If `root /srv/torrents` and a client requests
    # `/torrents/foo.txt`, then nginx reads `/srv/torrents/torrents/foo.txt`. Solutions:
    #
    # * Rewrite the request to strip the leading `/torrents`.
    # * Set `root /srv`. This is elegant, and a request for `/torrents/../` will be handled by
    #   the `location /` context, but it feels risky, because the `root` directive has an overly
    #   broad scope.
    location /torrents/ {
        autoindex on;
        root /srv/torrents;
        rewrite ^/torrents(/.*)$ $1 break;
    }
}

# vim:set ft=conf:
