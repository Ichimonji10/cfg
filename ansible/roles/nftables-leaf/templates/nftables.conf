#!/usr/bin/nft -f
#
# For reference information, see:
#
# * nft(8)
# * https://wiki.nftables.org/wiki-nftables/index.php/Main_Page
{% if 'bittorrent_hosts' in group_names %}
define bittorrent_data = 41046
define bittorrent_dht = 40035
{% endif %}
{% if 'syncthing_hosts' in group_names %}
define syncthing_core_ichimonji10 = 22000
define syncthing_discovery_ichimonji10 = 21027
{% endif %}
{% if 'workstations' in group_names %}
define steam_tcp_port_1 = 27036
define steam_tcp_port_2 = 27037
define steam_udp_port_1 = 27031
define steam_udp_port_2 = 27036
{% endif %}

define accepted_tcp_ports = {
  {% if 'servers' in group_names %}
  ssh,
  {% endif %}
  {% if 'webservers' in group_names %}
  http,
  https,
  {% endif %}
  {% if 'syncthing_hosts' in group_names %}
  $syncthing_core_ichimonji10,
  {% endif %}
  {% if 'workstations' in group_names %}
  $steam_tcp_port_1,
  $steam_tcp_port_2,
  {% endif %}
  bootpc
}
define accepted_udp_ports = {
  {% if 'syncthing_hosts' in group_names %}
  $syncthing_discovery_ichimonji10,
  {% endif %}
  {% if 'workstations' in group_names %}
  $steam_udp_port_1,
  $steam_udp_port_2,
  {% endif %}
  bootpc
}

{% if 'bittorrent_hosts' in group_names %}
define accepted_tcp_ports_from_tun0 = {
  $bittorrent_data,
  $bittorrent_dht
}
define accepted_udp_ports_from_tun0 = {
  $bittorrent_data,
  $bittorrent_dht
}
{% endif %}

table inet filter {
  # Base chains.
  #
  # Ending base chains with ICMP rejection notices gives clients faster feedback than just dropping,
  # and reduces traffic by avoiding retransmissions.
  chain input {
    type filter hook input priority 0; policy drop;

    ct state {established, related} accept
    ct state invalid drop

    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept
    tcp dport $accepted_tcp_ports accept
    udp dport $accepted_udp_ports accept

    iifname lo accept
    {% if 'bittorrent_hosts' in group_names %}
    iifname tun0 jump input_from_tun0
    {% endif %}

    reject with icmpx type port-unreachable
  }
  chain forward {
    type filter hook forward priority 0; policy drop;
    {% if 'vm_hosts' in group_names %}
    ct state {established, related} accept
    ct state invalid drop
    iifname "br-*" accept
    iifname "docker0" accept
    {% endif %}
    reject with icmpx type no-route
  }
  chain output {
    type filter hook output priority 0; policy accept;
  }

  {% if 'bittorrent_hosts' in group_names %}
  # Additional input chains.
  chain input_from_tun0 {
    tcp dport $accepted_tcp_ports_from_tun0 accept
    udp dport $accepted_udp_ports_from_tun0 accept
    return
  }
  {% endif %}
}

{% if 'vm_hosts' in group_names %}
table ip nat {
  chain prerouting {
    type nat hook prerouting priority dstnat;
    iifname "br-*" mark set 0x00000001
    iifname "docker0" mark set 0x00000001
  }
  chain postrouting {
    type nat hook postrouting priority srcnat;
    mark 0x00000001 masquerade
  }
}
{% endif %}

# vim:set ts=2 sw=2 et:
