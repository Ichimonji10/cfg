#!/usr/bin/nft -f
#
# For reference information, see:
#
# * nft(8)
# * https://wiki.nftables.org/wiki-nftables/index.php/Main_Page
#
# Interfaces used by this firewall include:
#
# {{ nftables_branch_downstream_if }}
#     Downstream interface. Hosts may initiate connections to anywhere.
#
# {{ nftables_branch_upstream_if }}
#     Upstream interface. Hosts may not initiate connections.

table inet filter {
  # Base chains.
  #
  # Ending base chains with ICMP rejection notices gives clients faster feedback than just dropping,
  # and reduces traffic by avoiding retransmissions.
  chain input {
    type filter hook input priority 0; policy drop;

    ct state {established, related} accept
    ct state invalid drop

    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept
    tcp dport ssh accept

    iifname lo accept
    iifname {{ nftables_branch_downstream_if }} jump input_from_downstream
    iifname {{ nftables_branch_upstream_if }} jump input_from_upstream

    reject with icmpx type port-unreachable
  }
  chain forward {
    type filter hook forward priority 0; policy drop;

    ct state {established, related} accept
    ct state invalid drop

    iifname lo accept
    iifname {{ nftables_branch_downstream_if }} accept

    reject with icmpx type no-route
  }
  chain output {
    type filter hook output priority 0; policy accept;
  }

  # Additional input chains.
  chain input_from_downstream {
    tcp dport {bootps, domain} accept
    udp dport {bootps, domain} accept
    return
  }
  chain input_from_upstream {
    # DHCP clients must listen for responses on a fixed port. See RFC 2131 (especially section 4.1)
    # and: http://stackoverflow.com/questions/1790960/why-dhcp-client-listens-on-port-68
    tcp dport bootpc accept
    udp dport bootpc accept
    return
  }
}

table ip nat {
  chain prerouting {
    type nat hook prerouting priority dstnat;
    iifname "{{ nftables_branch_downstream_if }}" mark set 0x00000001
  }
  chain postrouting {
    type nat hook postrouting priority srcnat;
    # "Masquerade is a special case of SNAT, where the source address is automagically set to the
    # address of the output interface."
    mark 0x00000001 masquerade
  }
}

# vim:set ts=2 sw=2 et:
